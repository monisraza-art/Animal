// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}




model City {
  id      Int              @id @default(autoincrement())
  name    String           @unique
  charges DeliveryCharge[]
  createdAt DateTime       @default(now())
}

model DeliveryCharge {
  id      Int      @id @default(autoincrement())
  amount  Float
  cityId  Int
  city    City     @relation(fields: [cityId], references: [id])
  createdAt DateTime @default(now())
}







model Product {
  id             Int           @id @default(autoincrement())
  productName    String
  genericName    String?
  categoryId     Int?
  subCategoryId  Int?
  productType    ProductType?  @relation(fields: [productTypeId], references: [id])
  productTypeId  Int?
  company        Company       @relation(fields: [companyId], references: [id])
  companyId      Int
  price          Float?
  dealerPrice    Float?
  customerPrice  Float?
  packingUnit    ProductUnit   @relation(fields: [packingUnitId], references: [id])
  packingUnitId  Int
  partner        Partner?      @relation(fields: [partnerId], references: [id])
  partnerId      Int?
  description    String?   @db.LongText
  dosage         String?   @db.LongText

  image          ProductImage?
  productImageId Int?          @unique // Ensures 1-to-1

  pdf            ProductPdf?   
  productPdfId   Int?          @unique

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}


model ProductPdf {
  id        Int      @id @default(autoincrement())
  url       String
  publicId  String?
  product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String
  publicId  String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Company {
  id          Int           @id @default(autoincrement())
  companyName String @unique
  mobileNumber String?  @unique
  products    Product[]
  address     String? @unique
  email       String? @unique
  image       CompanyImage? 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
} 

model CompanyImage {
  id        Int      @id @default(autoincrement())
  url       String  @unique
  alt       String  @unique
  publicId  String?  @unique
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

enum SendToPartner {
  YES
  NO
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}


model PartnerImage {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String?
  publicId  String?
 partner   Partner? @relation(fields: [partnerId], references: [id])
  partnerId Int?     @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StartTime {
  id        Int      @id @default(autoincrement())
  name      String
  startTime DateTime @db.Time
  endTime   DateTime @db.Time
  partners  Partner[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Partner {
  id                Int             @id @default(autoincrement())
  partnerName       String
  gender            Gender?
  partnerEmail      String?
  shopName          String?
  partnerMobileNumber String?
  cityName          String?
  fullAddress       String?
  rvmpNumber        String?
  sendToPartner     SendToPartner?
  qualificationDegree String?
  zipcode           String?
  state             String?
  areaTown          String?
  password          String? // Consider security best practices for storing passwords
  bloodGroup        BloodGroup?
    availableDaysOfWeek  PartnerAvailableDay[]
   partnerImage     PartnerImage?   
  
  startTime         StartTime[]
  
  specialization    String?
  
  species           String?
  
  partnerType        String?
  products          Product[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model PartnerAvailableDay {
  id         Int        @id @default(autoincrement())
  day        DayOfWeek
  partner    Partner    @relation(fields: [partnerId], references: [id])
  partnerId  Int

  @@unique([day, partnerId]) // prevent duplicate days for the same partner
}

model ProductType {
  id        Int       @id @default(autoincrement())
  type      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductUnit {
  id        Int       @id @default(autoincrement())
  units     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}